var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
// third-party
import React from 'react';
import PropTypes from 'prop-types';
// components
import SuccessIcon from './SuccessIcon';
import ErrorIcon from './ErrorIcon';
import InfoIcon from './InfoIcon';
import WarningIcon from './WarningIcon';
import CustomIcon from './CustomIcon';
import Buttons from './Buttons';
import Input from './Input';
import ValidationMessage from './ValidationMessage';
import Title from './Title';
import Content from './Content';
import Overlay from './Overlay';
// other
import * as styles from '../styles/SweetAlertStyles';
import * as Patterns from '../constants/patterns';
var style = styles.sweetAlert;
var SweetAlert = /** @class */ (function (_super) {
    __extends(SweetAlert, _super);
    function SweetAlert() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            type: 'default',
            focusConfirmBtn: true,
            inputValue: '',
            showValidationMessage: false,
            timer: null,
        };
        _this.setStateFromProps = function (props) {
            props = props || _this.props;
            var type = _this.getTypeFromProps(props);
            _this.setState({
                type: type,
                focusConfirmBtn: props.focusConfirmBtn && type !== 'input',
            });
        };
        _this.getTypeFromProps = function (props) {
            if (props.type)
                return props.type;
            if (props.secondary)
                return 'secondary';
            if (props.info)
                return 'info';
            if (props.success)
                return 'success';
            if (props.warning)
                return 'warning';
            if (props.danger || props.error)
                return 'danger';
            if (props.input)
                return 'input';
            if (props.custom)
                return 'custom';
            return _this.state.type;
        };
        _this.unsupportedProp = function (oldProp, message) {
            try {
                console.warn("react-bootstrap-sweetalert: Unsupported prop '" + oldProp + "'. Please " + message);
            }
            catch (e) {
                // do nothing
            }
        };
        _this.getIcon = function () {
            switch (_this.state.type) {
                case 'danger':
                case 'error':
                    return React.createElement(ErrorIcon, null);
                case 'warning':
                    return React.createElement(WarningIcon, null);
                case 'info':
                    return React.createElement(InfoIcon, null);
                case 'success':
                    return React.createElement(SuccessIcon, null);
                case 'custom':
                    if (_this.props.customIcon) {
                        if (typeof _this.props.customIcon == 'string') {
                            return React.createElement(CustomIcon, { iconUrl: _this.props.customIcon });
                        }
                        return _this.props.customIcon;
                    }
                    return null;
                default:
                    return null;
            }
        };
        _this.onChangeInput = function (e) {
            var target = e.target;
            _this.setState({
                inputValue: target.value,
                showValidationMessage: false
            });
        };
        _this.isValidInput = function () {
            if (!_this.props.required) {
                return true;
            }
            var regex = _this.props.validationRegex || (_this.props.inputType === 'email' ? Patterns.emailRegex : Patterns.defaultRegex);
            return regex.test(_this.state.inputValue);
        };
        _this.onConfirm = function () {
            if (_this.state.type === 'input') {
                if (_this.isValidInput()) {
                    _this.props.onConfirm(_this.state.inputValue);
                }
                else {
                    _this.setState({
                        showValidationMessage: true
                    });
                }
            }
            else {
                _this.props.onConfirm();
            }
        };
        _this.onInputKeyDown = function (e) {
            if (e.keyCode == 13) {
                if (_this.props.onConfirm) {
                    _this.onConfirm();
                    e.stopPropagation();
                }
            }
        };
        _this.onKeyDown = function (e) {
            if (e.keyCode == 27) {
                if (_this.props.allowEscape && _this.props.onCancel) {
                    _this.props.onCancel();
                    e.stopPropagation();
                }
            }
        };
        _this.onClickInside = function (e) {
            e.stopPropagation();
        };
        _this.onClickOutside = function () {
            if (_this.props.closeOnClickOutside && _this.props.onCancel) {
                _this.props.onCancel();
            }
        };
        return _this;
    }
    SweetAlert.prototype.componentWillMount = function () {
        if (this.props.defaultValue != null) {
            this.setState({
                inputValue: this.props.defaultValue
            });
        }
        this.setStateFromProps();
        this.props.beforeMount();
    };
    SweetAlert.prototype.componentDidMount = function () {
        document.body.classList.add('sweetalert-overflow-hidden');
        this.props.afterMount();
        this.handleTimeout();
    };
    SweetAlert.prototype.componentWillReceiveProps = function (nextProps) {
        if (this.getTypeFromProps(this.props) !== this.getTypeFromProps(nextProps)) {
            this.setStateFromProps(nextProps);
            this.handleTimeout(nextProps);
        }
        else if (this.props.timeout !== nextProps.timeout) {
            this.handleTimeout(nextProps);
        }
    };
    SweetAlert.prototype.componentWillUpdate = function (nextProps, nextState) {
        this.props.beforeUpdate(nextProps, nextState);
    };
    SweetAlert.prototype.componentDidUpdate = function (prevProps, prevState) {
        this.props.afterUpdate(prevProps, prevState);
    };
    SweetAlert.prototype.componentWillUnmount = function () {
        document.body.classList.remove('sweetalert-overflow-hidden');
        this.props.beforeUnmount();
    };
    SweetAlert.prototype.handleTimeout = function (props) {
        props = props || this.props;
        if (this.state.timer) {
            clearTimeout(this.state.timer);
        }
        if (props.timeout && props.timeout > 0) {
            var timer = setTimeout(function () { return props.onConfirm(); }, props.timeout);
            this.setState({ timer: timer });
        }
    };
    SweetAlert.prototype.render = function () {
        var _this = this;
        if (!this.props.show) {
            return false;
        }
        return (React.createElement("div", null,
            React.createElement("style", { type: "text/css", dangerouslySetInnerHTML: { __html: "\n            body.sweetalert-overflow-hidden {\n              overflow: hidden;\n            }\n            body .sweet-alert button {\n              outline: none !important;\n            }\n        " } }),
            React.createElement("style", { type: "text/css" }, "@-webkit-keyframes showSweetAlert {  0% {    transform: scale(0.7);    -webkit-transform: scale(0.7);  }  45% {    transform: scale(1.05);    -webkit-transform: scale(1.05);  }  80% {    transform: scale(0.95);    -webkit-tranform: scale(0.95);  }  100% {    transform: scale(1);    -webkit-transform: scale(1);  }}@keyframes showSweetAlert {  0% {    transform: scale(0.7);    -webkit-transform: scale(0.7);  }  45% {    transform: scale(1.05);    -webkit-transform: scale(1.05);  }  80% {    transform: scale(0.95);    -webkit-tranform: scale(0.95);  }  100% {    transform: scale(1);    -webkit-transform: scale(1);  }}@-webkit-keyframes hideSweetAlert {  0% {    transform: scale(1);    -webkit-transform: scale(1);  }  100% {    transform: scale(0.5);    -webkit-transform: scale(0.5);  }}@keyframes hideSweetAlert {  0% {    transform: scale(1);    -webkit-transform: scale(1);  }  100% {    transform: scale(0.5);    -webkit-transform: scale(0.5);  }}@-webkit-keyframes animateSuccessTip {  0% {    width: 0;    left: 1px;    top: 19px;  }  54% {    width: 0;    left: 1px;    top: 19px;  }  70% {    width: 50px;    left: -8px;    top: 37px;  }  84% {    width: 17px;    left: 21px;    top: 48px;  }  100% {    width: 25px;    left: 14px;    top: 45px;  }}@keyframes animateSuccessTip {  0% {    width: 0;    left: 1px;    top: 19px;  }  54% {    width: 0;    left: 1px;    top: 19px;  }  70% {    width: 50px;    left: -8px;    top: 37px;  }  84% {    width: 17px;    left: 21px;    top: 48px;  }  100% {    width: 25px;    left: 14px;    top: 45px;  }}@-webkit-keyframes animateSuccessLong {  0% {    width: 0;    right: 46px;    top: 54px;  }  65% {    width: 0;    right: 46px;    top: 54px;  }  84% {    width: 55px;    right: 0px;    top: 35px;  }  100% {    width: 47px;    right: 8px;    top: 38px;  }}@keyframes animateSuccessLong {  0% {    width: 0;    right: 46px;    top: 54px;  }  65% {    width: 0;    right: 46px;    top: 54px;  }  84% {    width: 55px;    right: 0px;    top: 35px;  }  100% {    width: 47px;    right: 8px;    top: 38px;  }}@-webkit-keyframes rotatePlaceholder {  0% {    transform: rotate(-45deg);    -webkit-transform: rotate(-45deg);  }  5% {    transform: rotate(-45deg);    -webkit-transform: rotate(-45deg);  }  12% {    transform: rotate(-405deg);    -webkit-transform: rotate(-405deg);  }  100% {    transform: rotate(-405deg);    -webkit-transform: rotate(-405deg);  }}@keyframes rotatePlaceholder {  0% {    transform: rotate(-45deg);    -webkit-transform: rotate(-45deg);  }  5% {    transform: rotate(-45deg);    -webkit-transform: rotate(-45deg);  }  12% {    transform: rotate(-405deg);    -webkit-transform: rotate(-405deg);  }  100% {    transform: rotate(-405deg);    -webkit-transform: rotate(-405deg);  }}@-webkit-keyframes animateErrorIcon {  0% {    transform: rotateX(100deg);    -webkit-transform: rotateX(100deg);    opacity: 0;  }  100% {    transform: rotateX(0deg);    -webkit-transform: rotateX(0deg);    opacity: 1;  }}@keyframes animateErrorIcon {  0% {    transform: rotateX(100deg);    -webkit-transform: rotateX(100deg);    opacity: 0;  }  100% {    transform: rotateX(0deg);    -webkit-transform: rotateX(0deg);    opacity: 1;  }}@-webkit-keyframes animateXMark {  0% {    transform: scale(0.4);    -webkit-transform: scale(0.4);    margin-top: 26px;    opacity: 0;  }  50% {    transform: scale(0.4);    -webkit-transform: scale(0.4);    margin-top: 26px;    opacity: 0;  }  80% {    transform: scale(1.15);    -webkit-transform: scale(1.15);    margin-top: -6px;  }  100% {    transform: scale(1);    -webkit-transform: scale(1);    margin-top: 0;    opacity: 1;  }}@keyframes animateXMark {  0% {    transform: scale(0.4);    -webkit-transform: scale(0.4);    margin-top: 26px;    opacity: 0;  }  50% {    transform: scale(0.4);    -webkit-transform: scale(0.4);    margin-top: 26px;    opacity: 0;  }  80% {    transform: scale(1.15);    -webkit-transform: scale(1.15);    margin-top: -6px;  }  100% {    transform: scale(1);    -webkit-transform: scale(1);    margin-top: 0;    opacity: 1;  }}@-webkit-keyframes pulseWarning {  0% {    border-color: #F8D486;  }  100% {    border-color: #F8BB86;  }}@keyframes pulseWarning {  0% {    border-color: #F8D486;  }  100% {    border-color: #F8BB86;  }}@-webkit-keyframes pulseWarningIns {  0% {    background-color: #F8D486;  }  100% {    background-color: #F8BB86;  }}@keyframes pulseWarningIns {  0% {    background-color: #F8D486;  }  100% {    background-color: #F8BB86;  }}"),
            React.createElement(Overlay, { show: !this.props.hideOverlay, onClick: this.onClickOutside, onKeyDown: this.onKeyDown },
                React.createElement("div", { style: Object.assign({}, style, this.props.style), tabIndex: 0, ref: "container", onKeyDown: this.onKeyDown, onClick: this.onClickInside, className: 'sweet-alert ' + this.props.customClass },
                    (this.props.showCloseButton && this.props.onCancel) && React.createElement("span", { className: 'btn', style: Object.assign({}, styles.closeButton, this.props.style), onClick: function () { return _this.props.onCancel(); } }, "x"),
                    this.getIcon(),
                    React.createElement(Title, null, this.props.title),
                    React.createElement(Content, null, this.props.children),
                    this.state.type === 'input' && (React.createElement(Input, __assign({}, this.props, this.state, { type: this.state.type, onInputKeyDown: this.onInputKeyDown, onChangeInput: this.onChangeInput }))),
                    this.state.showValidationMessage && React.createElement(ValidationMessage, __assign({}, this.props)),
                    React.createElement(Buttons, __assign({}, this.props, { type: this.state.type, onConfirm: this.onConfirm, focusConfirmBtn: this.state.focusConfirmBtn }))))));
    };
    SweetAlert.propTypes = {
        type: PropTypes.oneOf(['default', 'info', 'success', 'warning', 'danger', 'error', 'input', 'custom']),
        // shortcut props for type
        info: PropTypes.bool,
        success: PropTypes.bool,
        warning: PropTypes.bool,
        danger: PropTypes.bool,
        error: PropTypes.bool,
        input: PropTypes.bool,
        custom: PropTypes.bool,
        title: PropTypes.oneOfType([PropTypes.node, PropTypes.string]).isRequired,
        onCancel: PropTypes.func,
        onConfirm: PropTypes.func.isRequired,
        confirmBtnText: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),
        confirmBtnBsStyle: PropTypes.string,
        confirmBtnCssClass: PropTypes.string,
        confirmBtnStyle: PropTypes.object,
        cancelBtnText: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),
        cancelBtnBsStyle: PropTypes.string,
        cancelBtnCssClass: PropTypes.string,
        cancelBtnStyle: PropTypes.object,
        btnSize: PropTypes.string,
        customIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),
        show: PropTypes.bool,
        required: PropTypes.bool,
        placeholder: PropTypes.string,
        validationMsg: PropTypes.string,
        validationRegex: PropTypes.object,
        defaultValue: PropTypes.string,
        inputType: PropTypes.string,
        style: PropTypes.object,
        closeBtnStyle: PropTypes.object,
        customClass: PropTypes.string,
        showConfirm: PropTypes.bool,
        showCancel: PropTypes.bool,
        showCloseButton: PropTypes.bool,
        allowEscape: PropTypes.bool,
        closeOnClickOutside: PropTypes.bool,
        hideOverlay: PropTypes.bool,
        disabled: PropTypes.bool,
        focusConfirmBtn: PropTypes.bool,
        beforeMount: PropTypes.func,
        afterMount: PropTypes.func,
        beforeUpdate: PropTypes.func,
        afterUpdate: PropTypes.func,
        beforeUnmount: PropTypes.func,
        timeout: PropTypes.number,
    };
    SweetAlert.defaultProps = {
        allowEscape: true,
        closeOnClickOutside: true,
        inputType: 'text',
        customClass: '',
        validationMsg: null,
        validationRegex: null,
        hideOverlay: false,
        show: true,
        required: true,
        disabled: false,
        focusConfirmBtn: true,
        showCloseButton: false,
        beforeMount: function () { },
        afterMount: function () { },
        beforeUpdate: function () { },
        afterUpdate: function () { },
        beforeUnmount: function () { },
        style: {},
        closeBtnStyle: {},
        timeout: 0,
    };
    SweetAlert.SuccessIcon = SuccessIcon;
    SweetAlert.ErrorIcon = ErrorIcon;
    SweetAlert.InfoIcon = InfoIcon;
    SweetAlert.WarningIcon = WarningIcon;
    SweetAlert.CustomIcon = CustomIcon;
    SweetAlert.Buttons = Buttons;
    SweetAlert.Input = Input;
    SweetAlert.ValidationMessage = ValidationMessage;
    SweetAlert.Title = Title;
    SweetAlert.Content = Content;
    return SweetAlert;
}(React.Component));
export default SweetAlert;
//# sourceMappingURL=SweetAlert.js.map
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import React from 'react';
import * as styles from '../styles/SweetAlertStyles';
import { actions as actionsStyle } from "../styles/SweetAlertStyles";
var Buttons = /** @class */ (function (_super) {
    __extends(Buttons, _super);
    function Buttons() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.buttonStyles = {};
        _this.confirmButtonElement = null;
        _this.setConfirmButtonElementRef = function (element) {
            _this.confirmButtonElement = element;
        };
        _this.getButtonStyle = function (bsStyle) {
            if (bsStyle === 'error')
                bsStyle = 'danger';
            if (_this.buttonStyles[bsStyle] == null) {
                var style = Buttons.styles[bsStyle] || Buttons.styles.default;
                _this.buttonStyles[bsStyle] = {
                    borderColor: "" + style.borderColor,
                    boxShadow: "inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px " + style.shadowColor,
                };
            }
            return _this.buttonStyles[bsStyle];
        };
        return _this;
    }
    Buttons.prototype.componentDidMount = function () {
        this.focusButton();
    };
    Buttons.prototype.componentDidUpdate = function (prevProps) {
        var _this = this;
        // when displaying back to back alerts React will treat this
        // as an update to the same alert. this causes componentDidMount
        // to not be called for the subsequent alerts. i hope to find a better
        // way to handle this in the future, but for now i'm checking if the
        // title, type, or button text has changed
        if (prevProps.type !== this.props.type ||
            prevProps.confirmBtnText !== this.props.confirmBtnText ||
            prevProps.title !== this.props.title) {
            setTimeout(function () { return _this.focusButton(); }, 0);
        }
    };
    Buttons.prototype.focusButton = function () {
        if (this.props.focusConfirmBtn && this.confirmButtonElement) {
            try {
                this.confirmButtonElement.focus();
            }
            catch (e) {
                // whoops
            }
        }
    };
    Buttons.prototype.render = function () {
        var _this = this;
        if (!this.props.showConfirm && !this.props.showCancel) {
            return false;
        }
        var cancelBtnBsStyle = this.props.cancelBtnBsStyle === 'error' ? 'danger' : this.props.cancelBtnBsStyle;
        var confirmBtnBsStyle = this.props.confirmBtnBsStyle === 'error' ? 'danger' : this.props.confirmBtnBsStyle;
        var cancelButtonStyle = Object.assign({}, styles.button, this.props.cancelBtnStyle || {});
        var confirmButtonStyle = Object.assign({}, styles.button, this.getButtonStyle(confirmBtnBsStyle), this.props.confirmBtnStyle || {});
        return (React.createElement("p", { style: actionsStyle },
            this.props.showCancel && (React.createElement("span", null,
                React.createElement("button", { style: cancelButtonStyle, className: "btn btn-" + this.props.btnSize + " btn-" + cancelBtnBsStyle + " " + this.props.cancelBtnCssClass, onClick: function () { return _this.props.onCancel(); }, type: "button" }, this.props.cancelBtnText))),
            this.props.showConfirm && (React.createElement("span", null,
                React.createElement("button", { ref: this.setConfirmButtonElementRef, disabled: this.props.disabled, style: confirmButtonStyle, className: "btn btn-" + this.props.btnSize + " btn-" + confirmBtnBsStyle + " " + this.props.confirmBtnCssClass, onClick: function () { return _this.props.onConfirm(); }, type: "button" }, this.props.confirmBtnText)))));
    };
    Buttons.defaultProps = {
        confirmBtnText: 'OK',
        confirmBtnBsStyle: 'primary',
        confirmBtnCssClass: '',
        confirmBtnStyle: {},
        cancelBtnText: 'Cancel',
        cancelBtnBsStyle: 'link',
        cancelBtnCssClass: '',
        cancelBtnStyle: {},
        focusConfirmBtn: true,
        showConfirm: true,
        showCancel: false,
        btnSize: 'lg',
    };
    Buttons.styles = {
        primary: {
            borderColor: '#286090',
            shadowColor: 'rgb(165, 202, 234)'
        },
        success: {
            borderColor: '#4cae4c',
            shadowColor: 'rgba(76, 174, 76, 0.6)'
        },
        info: {
            borderColor: '#46b8da',
            shadowColor: 'rgba(70, 184, 218, 0.6)'
        },
        danger: {
            borderColor: '#d43f3a',
            shadowColor: 'rgba(212, 63, 58, 0.6)'
        },
        warning: {
            borderColor: '#eea236',
            shadowColor: 'rgba(238, 162, 54, 0.6)'
        },
        default: {
            borderColor: '#cccccc',
            shadowColor: 'rgba(204, 204, 204, 0.6)'
        },
        secondary: {
            borderColor: '#cccccc',
            shadowColor: 'rgba(204, 204, 204, 0.6)'
        }
    };
    return Buttons;
}(React.Component));
export default Buttons;
//# sourceMappingURL=Buttons.js.map
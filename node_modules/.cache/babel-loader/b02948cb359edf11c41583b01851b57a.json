{"ast":null,"code":"import AuthService from \"../services/AuthService\";\nexport function configureFakeBackend() {\n  var users = [{\n    id: 1,\n    username: \"admin\",\n    password: \"admin\",\n    firstName: \"Admin\",\n    lastName: \"Master\",\n    role: \"Admin\"\n  }];\n  var realFetch = window.fetch;\n\n  window.fetch = function (url, opts) {\n    return new Promise(function (resolve, reject) {\n      // wrap in timeout to simulate server api call\n      setTimeout(function () {\n        // authenticate\n        if (url.endsWith(\"/users/authenticate\") && opts.method === \"POST\") {\n          // get parameters from post request\n          var params = JSON.parse(opts.body);\n          var item = {\n            email: params.username,\n            password: params.password\n          };\n          var responseJson = {};\n          AuthService.login(item).then(function (res) {\n            var token = res.token.split(\" \");\n            responseJson = {\n              id: res.user._id,\n              username: res.user.name,\n              role: \"Admin\",\n              token: token[1]\n            };\n            resolve({\n              ok: true,\n              json: function json() {\n                return responseJson;\n              }\n            });\n          }).catch(function (err) {\n            reject(\"Username or password is incorrect\");\n          });\n          return;\n        } // register\n\n\n        if (url.endsWith(\"/users/register\") && opts.method === \"POST\") {\n          // get parameters from post request\n          var _params = JSON.parse(opts.body); // add new users\n\n\n          var _params$fullname$spli = _params.fullname.split(\" \"),\n              firstName = _params$fullname$spli.firstName,\n              lastName = _params$fullname$spli.lastName;\n\n          var newUser = {\n            id: users.length + 1,\n            username: firstName,\n            password: _params.password,\n            firstName: firstName,\n            lastName: lastName,\n            role: \"Admin\"\n          };\n          users.push({\n            newUser: newUser\n          });\n          var _responseJson = {\n            id: newUser.id,\n            username: newUser.username,\n            firstName: newUser.firstName,\n            lastName: newUser.lastName,\n            role: newUser.role,\n            token: \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJDb2RlcnRoZW1lIiwiaWF0IjoxNTU1NjgyNTc1LCJleHAiOjE1ODcyMTg1NzUsImF1ZCI6ImNvZGVydGhlbWVzLmNvbSIsInN1YiI6InRlc3QiLCJmaXJzdG5hbWUiOiJIeXBlciIsImxhc3RuYW1lIjoiVGVzdCIsIkVtYWlsIjoidGVzdEBoeXBlci5jb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4ifQ.8qHJDbs5nw4FBTr3F8Xc1NJYOMSJmGnRma7pji0YwB4\"\n          };\n          resolve({\n            ok: true,\n            json: function json() {\n              return _responseJson;\n            }\n          });\n          return;\n        } // forget password\n\n\n        if (url.endsWith(\"/users/password-reset\") && opts.method === \"POST\") {\n          // get parameters from post request\n          var _params2 = JSON.parse(opts.body); // find if any user matches login credentials\n\n\n          var filteredUsers = users.filter(function (user) {\n            return user.username === _params2.username;\n          });\n\n          if (filteredUsers.length) {\n            var _responseJson2 = {\n              message: \"We've sent you a link to reset password to your registered email.\"\n            };\n            resolve({\n              ok: true,\n              json: function json() {\n                return _responseJson2;\n              }\n            });\n          } else {\n            // else return error\n            reject(\"Sorry, we could not find any registered user with entered username\");\n          }\n\n          return;\n        } // get users\n\n\n        if (url.endsWith(\"/users\") && opts.method === \"GET\") {\n          // check for fake auth token in header and return users if valid, this security is implemented server side in a real application\n          if (opts.headers && opts.headers.Authorization === \"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJDb2RlcnRoZW1lIiwiaWF0IjoxNTU1NjgyNTc1LCJleHAiOjE1ODcyMTg1NzUsImF1ZCI6ImNvZGVydGhlbWVzLmNvbSIsInN1YiI6InRlc3QiLCJmaXJzdG5hbWUiOiJIeXBlciIsImxhc3RuYW1lIjoiVGVzdCIsIkVtYWlsIjoidGVzdEBoeXBlci5jb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4ifQ.8qHJDbs5nw4FBTr3F8Xc1NJYOMSJmGnRma7pji0YwB4\") {\n            resolve({\n              ok: true,\n              json: function json() {\n                return users;\n              }\n            });\n          } else {\n            // return 401 not authorised if token is null or invalid\n            reject(\"Unauthorised\");\n          }\n\n          return;\n        } // pass through any requests not handled above\n\n\n        realFetch(url, opts).then(function (response) {\n          return resolve(response);\n        });\n      }, 500);\n    });\n  };\n}","map":{"version":3,"sources":["/Users/Raian/Documents/Cognitic/StudyIrelando-FrontEnd/src/helpers/fake-backend.js"],"names":["AuthService","configureFakeBackend","users","id","username","password","firstName","lastName","role","realFetch","window","fetch","url","opts","Promise","resolve","reject","setTimeout","endsWith","method","params","JSON","parse","body","item","email","responseJson","login","then","res","token","split","user","_id","name","ok","json","catch","err","fullname","newUser","length","push","filteredUsers","filter","message","headers","Authorization","response"],"mappings":"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","sourcesContent":["import AuthService from \"../services/AuthService\";\n\nexport function configureFakeBackend() {\n  let users = [\n    {\n      id: 1,\n      username: \"admin\",\n      password: \"admin\",\n      firstName: \"Admin\",\n      lastName: \"Master\",\n      role: \"Admin\"\n    }\n  ];\n  let realFetch = window.fetch;\n  window.fetch = function(url, opts) {\n    return new Promise((resolve, reject) => {\n      // wrap in timeout to simulate server api call\n      setTimeout(() => {\n        // authenticate\n        if (url.endsWith(\"/users/authenticate\") && opts.method === \"POST\") {\n          // get parameters from post request\n          let params = JSON.parse(opts.body);\n\n          let item = {\n            email: params.username,\n            password: params.password\n          };\n\n          let responseJson = {};\n\n          AuthService.login(item)\n            .then(res => {\n              let token = res.token.split(\" \");\n\n              responseJson = {\n                id: res.user._id,\n                username: res.user.name,\n                role: \"Admin\",\n                token: token[1]\n              };\n              resolve({ ok: true, json: () => responseJson });\n            })\n            .catch(err => {\n              reject(\"Username or password is incorrect\");\n            });\n\n          return;\n        }\n\n        // register\n        if (url.endsWith(\"/users/register\") && opts.method === \"POST\") {\n          // get parameters from post request\n          let params = JSON.parse(opts.body);\n\n          // add new users\n          let { firstName, lastName } = params.fullname.split(\" \");\n          let newUser = {\n            id: users.length + 1,\n            username: firstName,\n            password: params.password,\n            firstName: firstName,\n            lastName: lastName,\n            role: \"Admin\"\n          };\n          users.push({ newUser });\n\n          let responseJson = {\n            id: newUser.id,\n            username: newUser.username,\n            firstName: newUser.firstName,\n            lastName: newUser.lastName,\n            role: newUser.role,\n            token:\n              \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJDb2RlcnRoZW1lIiwiaWF0IjoxNTU1NjgyNTc1LCJleHAiOjE1ODcyMTg1NzUsImF1ZCI6ImNvZGVydGhlbWVzLmNvbSIsInN1YiI6InRlc3QiLCJmaXJzdG5hbWUiOiJIeXBlciIsImxhc3RuYW1lIjoiVGVzdCIsIkVtYWlsIjoidGVzdEBoeXBlci5jb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4ifQ.8qHJDbs5nw4FBTr3F8Xc1NJYOMSJmGnRma7pji0YwB4\"\n          };\n          resolve({ ok: true, json: () => responseJson });\n          return;\n        }\n\n        // forget password\n        if (url.endsWith(\"/users/password-reset\") && opts.method === \"POST\") {\n          // get parameters from post request\n          let params = JSON.parse(opts.body);\n\n          // find if any user matches login credentials\n          let filteredUsers = users.filter(user => {\n            return user.username === params.username;\n          });\n\n          if (filteredUsers.length) {\n            let responseJson = {\n              message:\n                \"We've sent you a link to reset password to your registered email.\"\n            };\n            resolve({ ok: true, json: () => responseJson });\n          } else {\n            // else return error\n            reject(\n              \"Sorry, we could not find any registered user with entered username\"\n            );\n          }\n          return;\n        }\n\n        // get users\n        if (url.endsWith(\"/users\") && opts.method === \"GET\") {\n          // check for fake auth token in header and return users if valid, this security is implemented server side in a real application\n          if (\n            opts.headers &&\n            opts.headers.Authorization ===\n              \"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJDb2RlcnRoZW1lIiwiaWF0IjoxNTU1NjgyNTc1LCJleHAiOjE1ODcyMTg1NzUsImF1ZCI6ImNvZGVydGhlbWVzLmNvbSIsInN1YiI6InRlc3QiLCJmaXJzdG5hbWUiOiJIeXBlciIsImxhc3RuYW1lIjoiVGVzdCIsIkVtYWlsIjoidGVzdEBoeXBlci5jb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4ifQ.8qHJDbs5nw4FBTr3F8Xc1NJYOMSJmGnRma7pji0YwB4\"\n          ) {\n            resolve({ ok: true, json: () => users });\n          } else {\n            // return 401 not authorised if token is null or invalid\n            reject(\"Unauthorised\");\n          }\n\n          return;\n        }\n\n        // pass through any requests not handled above\n        realFetch(url, opts).then(response => resolve(response));\n      }, 500);\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
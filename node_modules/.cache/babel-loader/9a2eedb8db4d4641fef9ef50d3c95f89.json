{"ast":null,"code":"import { LOGIN_USER, LOGIN_USER_SUCCESS, LOGIN_USER_FAILED, LOGOUT_USER, REGISTER_USER, REGISTER_USER_SUCCESS, REGISTER_USER_FAILED, FORGET_PASSWORD, FORGET_PASSWORD_SUCCESS, FORGET_PASSWORD_FAILED } from \"../../constants/actionTypes\";\nexport var loginUser = function loginUser(username, password) {\n  return {\n    type: LOGIN_USER,\n    payload: {\n      username: username,\n      password: password\n    }\n  };\n};\nexport var loginUserSuccess = function loginUserSuccess(user) {\n  return {\n    type: LOGIN_USER_SUCCESS,\n    payload: user\n  };\n};\nexport var loginUserFailed = function loginUserFailed(error) {\n  return {\n    type: LOGIN_USER_FAILED,\n    payload: error\n  };\n};\nexport var registerUser = function registerUser(fullname, email, password) {\n  return {\n    type: REGISTER_USER,\n    payload: {\n      fullname: fullname,\n      email: email,\n      password: password\n    }\n  };\n};\nexport var registerUserSuccess = function registerUserSuccess(user) {\n  return {\n    type: REGISTER_USER_SUCCESS,\n    payload: user\n  };\n};\nexport var registerUserFailed = function registerUserFailed(error) {\n  return {\n    type: REGISTER_USER_FAILED,\n    payload: error\n  };\n};\nexport var logoutUser = function logoutUser(history) {\n  return {\n    type: LOGOUT_USER,\n    payload: {\n      history: history\n    }\n  };\n};\nexport var forgetPassword = function forgetPassword(username) {\n  return {\n    type: FORGET_PASSWORD,\n    payload: {\n      username: username\n    }\n  };\n};\nexport var forgetPasswordSuccess = function forgetPasswordSuccess(passwordResetStatus) {\n  return {\n    type: FORGET_PASSWORD_SUCCESS,\n    payload: passwordResetStatus\n  };\n};\nexport var forgetPasswordFailed = function forgetPasswordFailed(error) {\n  return {\n    type: FORGET_PASSWORD_FAILED,\n    payload: error\n  };\n};","map":{"version":3,"sources":["/Users/Raian/Documents/raian-dev/Vegan-FrontEnd/src/redux/auth/actions.js"],"names":["LOGIN_USER","LOGIN_USER_SUCCESS","LOGIN_USER_FAILED","LOGOUT_USER","REGISTER_USER","REGISTER_USER_SUCCESS","REGISTER_USER_FAILED","FORGET_PASSWORD","FORGET_PASSWORD_SUCCESS","FORGET_PASSWORD_FAILED","loginUser","username","password","type","payload","loginUserSuccess","user","loginUserFailed","error","registerUser","fullname","email","registerUserSuccess","registerUserFailed","logoutUser","history","forgetPassword","forgetPasswordSuccess","passwordResetStatus","forgetPasswordFailed"],"mappings":"AACA,SACEA,UADF,EAEEC,kBAFF,EAGEC,iBAHF,EAIEC,WAJF,EAKEC,aALF,EAMEC,qBANF,EAOEC,oBAPF,EAQEC,eARF,EASEC,uBATF,EAUEC,sBAVF,QAWO,6BAXP;AAeA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,QAAD,EAAmBC,QAAnB;AAAA,SAAqD;AAC5EC,IAAAA,IAAI,EAAEb,UADsE;AAE5Ec,IAAAA,OAAO,EAAE;AAAEH,MAAAA,QAAQ,EAARA,QAAF;AAAYC,MAAAA,QAAQ,EAARA;AAAZ;AAFmE,GAArD;AAAA,CAAlB;AAKP,OAAO,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,IAAD;AAAA,SAA+B;AAC7DH,IAAAA,IAAI,EAAEZ,kBADuD;AAE7Da,IAAAA,OAAO,EAAEE;AAFoD,GAA/B;AAAA,CAAzB;AAKP,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAgC;AAC7DL,IAAAA,IAAI,EAAEX,iBADuD;AAE7DY,IAAAA,OAAO,EAAEI;AAFoD,GAAhC;AAAA,CAAxB;AAKP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAC1BC,QAD0B,EAE1BC,KAF0B,EAG1BT,QAH0B;AAAA,SAIV;AAChBC,IAAAA,IAAI,EAAET,aADU;AAEhBU,IAAAA,OAAO,EAAE;AAAEM,MAAAA,QAAQ,EAARA,QAAF;AAAYC,MAAAA,KAAK,EAALA,KAAZ;AAAmBT,MAAAA,QAAQ,EAARA;AAAnB;AAFO,GAJU;AAAA,CAArB;AASP,OAAO,IAAMU,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACN,IAAD;AAAA,SAA2B;AAC5DH,IAAAA,IAAI,EAAER,qBADsD;AAE5DS,IAAAA,OAAO,EAAEE;AAFmD,GAA3B;AAAA,CAA5B;AAKP,OAAO,IAAMO,kBAAkB,GAAG,SAArBA,kBAAqB,CAACL,KAAD;AAAA,SAAgC;AAChEL,IAAAA,IAAI,EAAEP,oBAD0D;AAEhEQ,IAAAA,OAAO,EAAEI;AAFuD,GAAhC;AAAA,CAA3B;AAKP,OAAO,IAAMM,UAAU,GAAG,SAAbA,UAAa,CAACC,OAAD;AAAA,SAA+B;AACvDZ,IAAAA,IAAI,EAAEV,WADiD;AAEvDW,IAAAA,OAAO,EAAE;AAAEW,MAAAA,OAAO,EAAPA;AAAF;AAF8C,GAA/B;AAAA,CAAnB;AAKP,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACf,QAAD;AAAA,SAAmC;AAC/DE,IAAAA,IAAI,EAAEN,eADyD;AAE/DO,IAAAA,OAAO,EAAE;AAAEH,MAAAA,QAAQ,EAARA;AAAF;AAFsD,GAAnC;AAAA,CAAvB;AAKP,OAAO,IAAMgB,qBAAqB,GAAG,SAAxBA,qBAAwB,CACnCC,mBADmC;AAAA,SAEnB;AAChBf,IAAAA,IAAI,EAAEL,uBADU;AAEhBM,IAAAA,OAAO,EAAEc;AAFO,GAFmB;AAAA,CAA9B;AAOP,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACX,KAAD;AAAA,SAAgC;AAClEL,IAAAA,IAAI,EAAEJ,sBAD4D;AAElEK,IAAAA,OAAO,EAAEI;AAFyD,GAAhC;AAAA,CAA7B","sourcesContent":["// @flow\nimport {\n  LOGIN_USER,\n  LOGIN_USER_SUCCESS,\n  LOGIN_USER_FAILED,\n  LOGOUT_USER,\n  REGISTER_USER,\n  REGISTER_USER_SUCCESS,\n  REGISTER_USER_FAILED,\n  FORGET_PASSWORD,\n  FORGET_PASSWORD_SUCCESS,\n  FORGET_PASSWORD_FAILED\n} from \"../../constants/actionTypes\";\n\ntype AuthAction = { type: string, payload: {} | string };\n\nexport const loginUser = (username: string, password: string): AuthAction => ({\n  type: LOGIN_USER,\n  payload: { username, password }\n});\n\nexport const loginUserSuccess = (user: string): AuthAction => ({\n  type: LOGIN_USER_SUCCESS,\n  payload: user\n});\n\nexport const loginUserFailed = (error: string): AuthAction => ({\n  type: LOGIN_USER_FAILED,\n  payload: error\n});\n\nexport const registerUser = (\n  fullname: string,\n  email: string,\n  password: string\n): AuthAction => ({\n  type: REGISTER_USER,\n  payload: { fullname, email, password }\n});\n\nexport const registerUserSuccess = (user: {}): AuthAction => ({\n  type: REGISTER_USER_SUCCESS,\n  payload: user\n});\n\nexport const registerUserFailed = (error: string): AuthAction => ({\n  type: REGISTER_USER_FAILED,\n  payload: error\n});\n\nexport const logoutUser = (history: any): AuthAction => ({\n  type: LOGOUT_USER,\n  payload: { history }\n});\n\nexport const forgetPassword = (username: string): AuthAction => ({\n  type: FORGET_PASSWORD,\n  payload: { username }\n});\n\nexport const forgetPasswordSuccess = (\n  passwordResetStatus: string\n): AuthAction => ({\n  type: FORGET_PASSWORD_SUCCESS,\n  payload: passwordResetStatus\n});\n\nexport const forgetPasswordFailed = (error: string): AuthAction => ({\n  type: FORGET_PASSWORD_FAILED,\n  payload: error\n});\n"]},"metadata":{},"sourceType":"module"}